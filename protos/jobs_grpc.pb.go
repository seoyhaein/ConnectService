// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: jobs.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LongLivedJobCall_Subscribe_FullMethodName   = "/protos.LongLivedJobCall/Subscribe"
	LongLivedJobCall_Unsubscribe_FullMethodName = "/protos.LongLivedJobCall/Unsubscribe"
)

// LongLivedJobCallClient is the client API for LongLivedJobCall service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LongLivedJobCallClient interface {
	Subscribe(ctx context.Context, in *JobsRequest, opts ...grpc.CallOption) (LongLivedJobCall_SubscribeClient, error)
	Unsubscribe(ctx context.Context, in *JobsRequest, opts ...grpc.CallOption) (*JobsResponse, error)
}

type longLivedJobCallClient struct {
	cc grpc.ClientConnInterface
}

func NewLongLivedJobCallClient(cc grpc.ClientConnInterface) LongLivedJobCallClient {
	return &longLivedJobCallClient{cc}
}

func (c *longLivedJobCallClient) Subscribe(ctx context.Context, in *JobsRequest, opts ...grpc.CallOption) (LongLivedJobCall_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &LongLivedJobCall_ServiceDesc.Streams[0], LongLivedJobCall_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &longLivedJobCallSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LongLivedJobCall_SubscribeClient interface {
	Recv() (*JobsResponse, error)
	grpc.ClientStream
}

type longLivedJobCallSubscribeClient struct {
	grpc.ClientStream
}

func (x *longLivedJobCallSubscribeClient) Recv() (*JobsResponse, error) {
	m := new(JobsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *longLivedJobCallClient) Unsubscribe(ctx context.Context, in *JobsRequest, opts ...grpc.CallOption) (*JobsResponse, error) {
	out := new(JobsResponse)
	err := c.cc.Invoke(ctx, LongLivedJobCall_Unsubscribe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LongLivedJobCallServer is the server API for LongLivedJobCall service.
// All implementations must embed UnimplementedLongLivedJobCallServer
// for forward compatibility
type LongLivedJobCallServer interface {
	Subscribe(*JobsRequest, LongLivedJobCall_SubscribeServer) error
	Unsubscribe(context.Context, *JobsRequest) (*JobsResponse, error)
	mustEmbedUnimplementedLongLivedJobCallServer()
}

// UnimplementedLongLivedJobCallServer must be embedded to have forward compatible implementations.
type UnimplementedLongLivedJobCallServer struct {
}

func (UnimplementedLongLivedJobCallServer) Subscribe(*JobsRequest, LongLivedJobCall_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedLongLivedJobCallServer) Unsubscribe(context.Context, *JobsRequest) (*JobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedLongLivedJobCallServer) mustEmbedUnimplementedLongLivedJobCallServer() {}

// UnsafeLongLivedJobCallServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LongLivedJobCallServer will
// result in compilation errors.
type UnsafeLongLivedJobCallServer interface {
	mustEmbedUnimplementedLongLivedJobCallServer()
}

func RegisterLongLivedJobCallServer(s grpc.ServiceRegistrar, srv LongLivedJobCallServer) {
	s.RegisterService(&LongLivedJobCall_ServiceDesc, srv)
}

func _LongLivedJobCall_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LongLivedJobCallServer).Subscribe(m, &longLivedJobCallSubscribeServer{stream})
}

type LongLivedJobCall_SubscribeServer interface {
	Send(*JobsResponse) error
	grpc.ServerStream
}

type longLivedJobCallSubscribeServer struct {
	grpc.ServerStream
}

func (x *longLivedJobCallSubscribeServer) Send(m *JobsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _LongLivedJobCall_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LongLivedJobCallServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LongLivedJobCall_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LongLivedJobCallServer).Unsubscribe(ctx, req.(*JobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LongLivedJobCall_ServiceDesc is the grpc.ServiceDesc for LongLivedJobCall service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LongLivedJobCall_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.LongLivedJobCall",
	HandlerType: (*LongLivedJobCallServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unsubscribe",
			Handler:    _LongLivedJobCall_Unsubscribe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _LongLivedJobCall_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "jobs.proto",
}
